**Importing Libraries**

!pip install pandas

import pandas as pd #useful for loading the dataset
import numpy as np # to perform array

**Choose Dataset from Local Directory**

from google.colab import files
uploaded = files.upload()

**Load Dataset**

dataset = pd.read_csv('adult.csv') # load data into a variable
dataset

**Summarize Dataset**

print(dataset.shape) #No. of rows and column
print(dataset.head(5)) #Top 5 value

**Mapping Salary Data to Binary Value**

income_set = set(dataset['income'])
dataset['income'] = dataset['income'].map({'<=50K' : 0, '>50K' :1}).astype(int)
print(dataset.head(20))

**Segregate Dataset into X(input/IndependentVariable) and Y(Output/Dependent Variable)**

X = dataset.iloc[:, :-1].values
X

Y = dataset.iloc[:, -1].values
Y

**Splitting Dataset into Train and Test**

!pip install scikit-learn

#Scikit Learn
from sklearn.model_selection import train_test_split #sklearn - Split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

**Feature Scaling**

we scale our data to make all the features contribute equally to the result
**Fit_Transform**- fit method is calculating the mean and variance of each of the features present in our data.

**Transform** -
 Transform method is transforming alll the features using the respective mean and variance,
We want our test data to be completely new and a surprise set for our model


from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_train

**Finding the Best K-Value**

error = []
from sklearn.neighbors import KNeighborsClassifier #algorithm
import matplotlib.pyplot as plt # library for Data Visualisation

#Calculating error for K values between 1 and 40
for i in range(1, 40):
  model = KNeighborsClassifier(n_neighbors=i)
  model.fit(X_train, Y_train) # training
  pred_i = model.predict(X_test) #predicting
  error.append(np.mean(pred_i != Y_test)) #calculating mean error

plt.figure(figsize=(12, 6))
plt.plot(range(1,40), error, color='red', linestyle='dashed', marker='o', markerfacecolor='blue', markersize=10)
plt.title('Error rate K Value')
plt.xlabel('K value') # x- axis
plt.ylabel('Mean Error') #Y-axis


**Training**

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors = 15, metric = 'minkowski', p=2)
model.fit(X_train, Y_train)

**Prediction for all Test Data**

Y_pred = model.predict(X_test)
#print(np.concatenate((Y_pred.reshape(len(Y_pred),1), Y_test.reshape(len(Y_test),1)),1))

**Evaluating Model- Confusion Matrix**

from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(Y_test, Y_pred)

#print("Confusion Matrix: ")
print("Accuracy of the Model: {0}%".format(accuracy_score(Y_test, Y_pred)*100))

**Predicting, wheather new customer with Age and Salary will Buy or Not**

age = int(input("Enter New Employee's Age: "))
edu = int(input("Enter New Employee's Education: "))
cg = int(input("Enter New Employee's Capital Gain: "))
wh = int(input("Enter New Employee's Hour's Per week: "))
newEmp = [[age,edu,cg,wh]]
result = model.predict(sc.transform(newEmp))
print(result)

if result == 1:
  print("Employee got Salary above 50K")
else:
  print("Customer might not got Salary above 50K")  
